import random
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from intents import intents  # Import intents from intents.py

# Variables for context
context = None

# Preprocess patterns for matching
def preprocess_patterns():
    patterns, tags = [], []
    for intent in intents['intents']:
        for pattern in intent['patterns']:
            cleaned_pattern = pattern.lower()
            patterns.append(cleaned_pattern)
            tags.append(intent['tag'])
    return patterns, tags

# Create TF-IDF matrix for patterns
patterns, tags = preprocess_patterns()
tfidf_vectorizer = TfidfVectorizer()
tfidf_matrix = tfidf_vectorizer.fit_transform(patterns)

# Function to get the best matching response
def get_response(message):
    global context  # Use the global context variable
    
    # Process the message
    processed_message = message.lower()
    message_vector = tfidf_vectorizer.transform([processed_message])
    similarities = cosine_similarity(message_vector, tfidf_matrix)
    max_similarity_index = np.argmax(similarities)
    
    # Find best matching intent
    if similarities[0, max_similarity_index] > 0.3:  # similarity threshold
        best_tag = tags[max_similarity_index]
        context = best_tag  # update context based on the identified tag
        for intent in intents['intents']:
            if intent['tag'] == best_tag:
                response = random.choice(intent['responses'])
                
                # Ask follow-up questions based on context
                if best_tag == "courses":
                    response += " Which department are you interested in: IT, Business, or Arts?"
                elif best_tag == "fees":
                    response += " Could you specify the course you're looking for fees?"
                elif best_tag == "admission":
                    response += " Do you need assistance with the application process or eligibility?"
                
                return response
    return "I'm sorry, I didn't quite catch that. Could you please elaborate?"

# Main chatbot interaction loop
print("|============= Welcome to College Inquiry Chatbot System! =============|")
print("|============================== Feel Free ============================|")
print("|================================== To ===============================|")
print("|=============== Ask your any query about our college ================|")

while True:
    message = input("| You: ")
    if message.lower() in ["bye", "goodbye", "exit"]:
        print("| Bot: Goodbye! Have a great day!")
        break
    else:
        response = get_response(message)
        print("| Bot:", response)
